'#### fill down the formula(usually Key) untill last row in data table next column ####
Sub data_fillDown(wks As Worksheet, sStartColumnLetter As String, sEndColumnLetter As String, sCriteriaColumnLetter As String, lRowDeleteFrom As Long)
   
    Dim lr1 As Long
           
    With wks
        ' clear the formula before filling down
        lr1 = .Cells(.Rows.Count, sCriteriaColumnLetter).End(3).Row
        If lr1 > lRowDeleteFrom Then .Range(.Cells(lRowDeleteFrom, sStartColumnLetter), .Cells(lr1, sEndColumnLetter)).ClearContents
       
        'fill down with formula
        lr1 = .Cells(.Rows.Count, sCriteriaColumnLetter).End(3).Row
        If lr1 >= lRowDeleteFrom Then .Range(.Cells(lRowDeleteFrom - 1, sStartColumnLetter), .Cells(lr1, sEndColumnLetter)).FillDown
    End With
   
End 


' added return value in case not found
Sub data_vbaVlookup(lookupRng As Range, tableArrayRngs As Range, Column_IndexNo As Integer, ResultOffset_ColumnNo As Integer, Optional sErrValue As String = "")
    Dim var As Variant
    If Len(sErrValue) = 0 Then
        var = Application.VLookup(lookupRng.Value, tableArrayRngs, Column_IndexNo, 0)
        lookupRng.Offset(, ResultOffset_ColumnNo) = var
    Else
        var = Application.VLookup(lookupRng.Value, tableArrayRngs, Column_IndexNo, 0)
        lookupRng.Offset(, ResultOffset_ColumnNo) = var
        lookupRng.Offset(, ResultOffset_ColumnNo).Replace What:="#N/A", Replacement:=sErrValue
    End If
End Sub




'Sum if by VBA to reduce the resource of excel auto calculation.
Sub data_vbaSumIf(rngResult As Range, rngSum As Range, lOffsetColFromSum_SearchCriteria1 As Long, lOffsetColFromResult_Criteria1 As Long, _
                                    Optional lOffsetColFromSum_SearchCriteria2 As Long = 0, Optional lOffsetColFromResult_Criteria2 As Long = 0, Optional lOffsetColFromSum_SearchCriteria3 As Long = 0, Optional lOffsetColFromResult_Criteria3 As Long = 0, _
                                    Optional lOffsetColFromSum_SearchCriteria4 As Long = 0, Optional lOffsetColFromResult_Criteria4 As Long = 0, Optional lOffsetColFromSum_SearchCriteria5 As Long = 0, Optional lOffsetColFromResult_Criteria5 As Long = 0)
    If rngSum.columns.Count <> 1 Then MsgBox "You didin't set correct data_vaSumIf function range(rngSum, lOffsetColFromSum_SearchCriteria1). the range should be 1 column."
       
    Dim rngCell As Range

    For Each rngCell In rngResult
        If lOffsetColFromSum_SearchCriteria2 = 0 Then
            rngCell.Value = Application.WorksheetFunction.SumIfs(rngSum, rngSum.Offset(, lOffsetColFromSum_SearchCriteria1), rngCell.Offset(, lOffsetColFromResult_Criteria1))
        ElseIf lOffsetColFromSum_SearchCriteria3 = 0 Then
            rngCell.Value = Application.WorksheetFunction.SumIfs(rngSum, rngSum.Offset(, lOffsetColFromSum_SearchCriteria1), rngCell.Offset(, lOffsetColFromResult_Criteria1) _
                                                                                                                                , rngSum.Offset(, lOffsetColFromSum_SearchCriteria2), rngCell.Offset(, lOffsetColFromResult_Criteria2))
        ElseIf lOffsetColFromSum_SearchCriteria4 = 0 Then
            rngCell.Value = Application.WorksheetFunction.SumIfs(rngSum, rngSum.Offset(, lOffsetColFromSum_SearchCriteria1), rngCell.Offset(, lOffsetColFromResult_Criteria1) _
                                                                                                                                , rngSum.Offset(, lOffsetColFromSum_SearchCriteria2), rngCell.Offset(, lOffsetColFromResult_Criteria2) _
                                                                                                                                , rngSum.Offset(, lOffsetColFromSum_SearchCriteria3), rngCell.Offset(, lOffsetColFromResult_Criteria3))
        ElseIf lOffsetColFromSum_SearchCriteria5 = 0 Then
            rngCell.Value = Application.WorksheetFunction.SumIfs(rngSum, rngSum.Offset(, lOffsetColFromSum_SearchCriteria1), rngCell.Offset(, lOffsetColFromResult_Criteria1) _
                                                                                                                                , rngSum.Offset(, lOffsetColFromSum_SearchCriteria2), rngCell.Offset(, lOffsetColFromResult_Criteria2) _
                                                                                                                                , rngSum.Offset(, lOffsetColFromSum_SearchCriteria3), rngCell.Offset(, lOffsetColFromResult_Criteria3) _
                                                                                                                                , rngSum.Offset(, lOffsetColFromSum_SearchCriteria4), rngCell.Offset(, lOffsetColFromResult_Criteria4))
        Else
            rngCell.Value = Application.WorksheetFunction.SumIfs(rngSum, rngSum.Offset(, lOffsetColFromSum_SearchCriteria1), rngCell.Offset(, lOffsetColFromResult_Criteria1) _
                                                                                                                                , rngSum.Offset(, lOffsetColFromSum_SearchCriteria2), rngCell.Offset(, lOffsetColFromResult_Criteria2) _
                                                                                                                                , rngSum.Offset(, lOffsetColFromSum_SearchCriteria3), rngCell.Offset(, lOffsetColFromResult_Criteria3) _
                                                                                                                                , rngSum.Offset(, lOffsetColFromSum_SearchCriteria4), rngCell.Offset(, lOffsetColFromResult_Criteria4) _
                                                                                                                                , rngSum.Offset(, lOffsetColFromSum_SearchCriteria5), rngCell.Offset(, lOffsetColFromResult_Criteria5))
        End If
    Next rngCell
                                   
End Sub




Function file_rawFilePath(iFileNo As Integer) As String
    Dim currYear As String: currYear = Format(Now, "yyyy")
   
    Select Case iFileNo
        Case Is = 1:    file_rawFilePath = file_mostRecentFile("W:\10. Raw Data\01. VBA RAW DATA\", "*AAI*", True)
        Case Is = 2:    file_rawFilePath = file_mostRecentFile("W:\10. Raw Data\01. VBA RAW DATA\", "*Claim Inquiry*", True)
       
        Case Is = 11:    file_rawFilePath = file_mostRecentFile("W:\02. Comm File\01. HE Communication File\", "*_HE_Communication file*", True)
        Case Is = 12:    file_rawFilePath = file_mostRecentFile("W:\02. Comm File\02. HA Communication File\", "*HA_Communication file*", True)
        Case Is = 13:    file_rawFilePath = file_mostRecentFile("W:\02. Comm File\03. IT Communication File\", "*IT_Communication file*", True)
        Case Is = 14:    file_rawFilePath = file_mostRecentFile("W:\02. Comm File\04. ID Communication File\", "*ID_Communication file*", True)
        Case Is = 15:    file_rawFilePath = file_mostRecentFile("W:\02. Comm File\05. AE Communication File\", "*AE_Communication file*", True)
        Case Is = 16:    file_rawFilePath = file_mostRecentFile("W:\02. Comm File\06. TT Communication File\", currYear & "??_TT_communication file_v*", True)
        Case Is = 17:    file_rawFilePath = file_mostRecentFile("Y:\05. Working File\05. RPA Claim Entry\", "*RPA_template_v*", True)
        Case Is = 18:    file_rawFilePath = file_mostRecentFile("W:\02. Comm File\06. TT Communication File\", CStr(Val(currYear) - 1) & "??_TT_communication file_v*", True)
       
        
       
        Case Is = 91:    file_rawFilePath = file_mostRecentFile("W:\09. Manual\01. Sales Team Manual\", "Manual1*", True)
        Case Is = 92:    file_rawFilePath = file_mostRecentFile("W:\09. Manual\01. Sales Team Manual\", "Manual2*", True)
        Case Is = 93:    file_rawFilePath = file_mostRecentFile("W:\09. Manual\01. Sales Team Manual\", "Manual3*", True)
       
               
      
       
    End Select
End Function


'Update: Add option to check the driver info, added E,F,S,C
Function file_mostRecentFile(sSearchDirectory As String, sWildCard As String, Optional bChkAlldriver As Boolean = True) As String
   
    Dim sPath As String, sFileName As String                        'holds the name of the file we're currently looking at
    Dim dteCurr As Date, dteMostRecent As Date                         'date of creation for the current file / holds the date of creation for the most recent file
    Dim sMostRecentPath As String                 'path of file with most recent date
    Dim vDriver As Variant, vDrivers As Variant: vDrivers = Array("Z", "Y", "X", "W", "V", "U", "T", "S", "R", "Q", "P", "O", "N", "M", "L", "K", "J", "I", "H", "G", "F", "E", "D", "C", "B", "A")
   
    If Right(sSearchDirectory, 1) <> "\" Then sSearchDirectory = sSearchDirectory & "\"  ' add the "\" if missing
    sWildCard = "*" & sWildCard & "*"
   
    If bChkAlldriver = True Then
        sSearchDirectory = Right(sSearchDirectory, Len(sSearchDirectory) - 1)   ' delete the driver Alphabet for replacing with others

        For Each vDriver In vDrivers
           sFileName = Dir(vDriver & sSearchDirectory & sWildCard)    'look for file in directory which matches wildcard
           Do While Len(sFileName) > 0                    'loop until Dir returns empty quotes (no files)
               dteCurr = FileDateTime(vDriver & sSearchDirectory & sFileName)
               If dteCurr > dteMostRecent Then            'check whether current file is more recent than previous files
                   dteMostRecent = dteCurr                'if so, update most recent date and file
                   sMostRecentPath = vDriver & sSearchDirectory & sFileName
               End If
               sFileName = Dir                            'move to next file in directory
           Loop
        Next
    Else
        sFileName = Dir(vDriver & sSearchDirectory & sWildCard)    'look for file in directory which matches wildcard
        Do While Len(sFileName) > 0                    'loop until Dir returns empty quotes (no files)
            dteCurr = FileDateTime(vDriver & sSearchDirectory & sFileName)
            If dteCurr > dteMostRecent Then            'check whether current file is more recent than previous files
                dteMostRecent = dteCurr                'if so, update most recent date and file
                sMostRecentPath = vDriver & sSearchDirectory & sFileName
            End If
            sFileName = Dir                            'move to next file in directory
        Loop
    End If
   
   
    If Len(sMostRecentPath) = 0 Then                       'check whether any files were returned
        file_mostRecentFile = "\No files match "
    Else
        file_mostRecentFile = sMostRecentPath
    End If
End Function




Function file_filePicker(Optional InitialFolder As String = "") As String
    Dim Selected As Integer, i As Integer
    Dim ReturnStr As String
    Dim tempStr As Variant
    Dim FDG As FileDialog
        Set FDG = Application.FileDialog(msoFileDialogFilePicker)
   
        With FDG
.Title = "Multi Files Selecte Dialog                 by Sales Admin Team"
.Filters.Add "Excel Files", "*.xlsx; *.xlsm; *.xls; *.xlsb; *.tsv"
.InitialView = msoFileDialogViewList
.InitialFileName = InitialFolder
.AllowMultiSelect = True
Selected = .Show

If Selected = -1 Then
For i = 1 To FDG.SelectedItems.Count - 1
tempStr = FDG.SelectedItems(i)
ReturnStr = ReturnStr & tempStr & "|"
Next i
tempStr = FDG.SelectedItems(.SelectedItems.Count)
file_filePicker = ReturnStr & tempStr

ElseIf Selected = 0 Then
MsgBox "No file is selected. The process will be end!!"
End

End If
        End With
 
    Set tempStr = Nothing: Set FDG = Nothing
End Function



Function file_findFolderDriver(sSearchDirectory As String, Optional bChkAlldriver As Boolean = True) As String
   
    Dim sPath As String, sPathName As String                        'holds the name of the file we're currently looking at
    Dim vDriver As Variant, vDrivers As Variant: vDrivers = Array("Z", "Y", "X", "W", "V", "U", "T", "S", "R", "Q", "P", "O", "N", "M", "L", "K", "J", "I", "H", "G", "F", "E", "D", "C", "B", "A")
   
    If Right(sSearchDirectory, 1) <> "\" Then sSearchDirectory = sSearchDirectory & "\"  ' add the "\" if missing
   
    If bChkAlldriver = True Then
        sSearchDirectory = Right(sSearchDirectory, Len(sSearchDirectory) - 1)   ' delete the driver Alphabet for replacing with others

        For Each vDriver In vDrivers
           sPath = Dir(vDriver & sSearchDirectory, vbDirectory)    'look for path in directory
           If sPath <> "" Then                   'loop until Dir returns empty quotes (no pathes)
            sPath = vDriver & sSearchDirectory
               Exit For                        'move to next driver
           End If
        Next
    Else
        sPath = Dir(vDriver & sSearchDirectory, vbDirectory) 'look for path in directory
        If sPath <> "" Then                   'loop until Dir returns empty quotes (no pathes)
        sPath = vDriver & sSearchDirectory
           End If
    End If
   
   
    If Len(sPath) = 0 Then                       'check whether any path was returned
        file_findFolderDriver = "\No Path match "
    Else
        file_findFolderDriver = sPath
    End If
End Function
   




